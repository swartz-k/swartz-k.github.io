<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on ax for swartz</title>
    <link>https://www.ax4j.com/posts/</link>
    <description>Recent content in Posts on ax for swartz</description>
    <image>
      <url>https://www.ax4j.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.ax4j.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 21 Nov 2021 23:08:00 +0800</lastBuildDate><atom:link href="https://www.ax4j.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Firecracker 研究 - 结合 kata 使用及常见问题分析</title>
      <link>https://www.ax4j.com/posts/kata-firecracker-no-such-file-error/</link>
      <pubDate>Sun, 21 Nov 2021 23:08:00 +0800</pubDate>
      
      <guid>https://www.ax4j.com/posts/kata-firecracker-no-such-file-error/</guid>
      <description>从虚拟机分析入手，讲解如何在 K8S 环境中安装、使用 Kata Container 和 Firecracker 以及遇到的 devmapper 导致 failed to mount &amp;hellip;. no such file or directory 问题的解决办法。</description>
    </item>
    
    <item>
      <title>Golang 中的领域驱动设计 - 战术设计</title>
      <link>https://www.ax4j.com/posts/ddd-using-golang-tactical-design/</link>
      <pubDate>Sat, 13 Nov 2021 16:17:21 +0800</pubDate>
      
      <guid>https://www.ax4j.com/posts/ddd-using-golang-tactical-design/</guid>
      <description>上篇文章中我们讲了在 Golang 中实现领域驱动设计 DDD 相关的战略设计，这一篇我们会提供更多代码示例，从战术层面讲一讲应该如何做！</description>
    </item>
    
    <item>
      <title>Golang 中的领域驱动设计 - 战略设计</title>
      <link>https://www.ax4j.com/posts/domain-driven-design-in-golang-strategic-design/</link>
      <pubDate>Thu, 11 Nov 2021 23:40:00 +0800</pubDate>
      
      <guid>https://www.ax4j.com/posts/domain-driven-design-in-golang-strategic-design/</guid>
      <description>还在用面向对象的设计吗？考虑一下 DDD 你会发现真香！从战略层面了解 Golang中如何实现 领域驱动设计 DDD。</description>
    </item>
    
    <item>
      <title>如何让 AI 模型跑起来系列 - Tensorflow</title>
      <link>https://www.ax4j.com/posts/ai-model-serving-tensorflow/</link>
      <pubDate>Wed, 10 Nov 2021 20:50:21 +0800</pubDate>
      
      <guid>https://www.ax4j.com/posts/ai-model-serving-tensorflow/</guid>
      <description>了解 AI 模型如何 Serving 之 Tensorflow Serving，会带你深入源码，研究 model 如何变成 http、grpc 服务</description>
    </item>
    
    <item>
      <title>Using WebAssembly threads from C, C&#43;&#43; and Rust</title>
      <link>https://www.ax4j.com/posts/using-webassembly-threads-from-c-cpp-rust/</link>
      <pubDate>Thu, 09 Sep 2021 14:00:00 +0800</pubDate>
      
      <guid>https://www.ax4j.com/posts/using-webassembly-threads-from-c-cpp-rust/</guid>
      <description>了解如何将用其他语言编写的多线程应用程序引入 WebAssembly。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.ax4j.com/posts/cdn-%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.ax4j.com/posts/cdn-%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/</guid>
      <description>CDN 论文解读 综述 CDN架构  源服务器将其URI名称空间委托给CDN分发和传递给请求路由系统的文档对象 源服务器将要分发的内容推送到分发系统 分发系统将内容移动到副本服务器。此外，该系统还通过反馈与请求路由系统进行交互，辅助客户请求的副本服务器选择过程 客户端从它认为是来源的地方请求文档。但是，由于URIname空间委派，请求实际上被定向到请求路由系统 请求路由系统将请求路由到CDN中合适的副本服务器 被选中的副本服务器将所请求的内容传递给客户端。另外，副本服务器向计费系统发送递送内容的计费信息 计费系统将计费信息聚合并提炼成统计和内容明细记录，以供源站和计费组织使用。统计数据也作为对请求路由系统的反馈 计费组织使用内容详细记录与内容分发和交付过程中涉及的每一方进行结算  Server PminK，最小K-中心问题 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.ax4j.com/posts/cloud-events-%E9%A9%B1%E5%8A%A8-everything/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.ax4j.com/posts/cloud-events-%E9%A9%B1%E5%8A%A8-everything/</guid>
      <description>Cloud events 驱动 everything </description>
    </item>
    
  </channel>
</rss>
